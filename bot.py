import os
import json
import logging
from typing import Dict, List, Optional
from functools import wraps

from supabase import create_client, Client
from telegram import (
    Update, 
    InlineKeyboardButton, 
    InlineKeyboardMarkup
)
from telegram.ext import (
    Application, 
    CommandHandler, 
    CallbackQueryHandler, 
    ContextTypes, 
    MessageHandler,
    filters
)
from awsgi import response

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ.get('BOT_TOKEN')
SUPABASE_URL = os.environ.get('SUPABASE_URL')
SUPABASE_ANON_KEY = os.environ.get('SUPABASE_ANON_KEY')
WEBHOOK_SECRET = os.environ.get('WEBHOOK_SECRET')

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase –∫–ª–∏–µ–Ω—Ç–∞
supabase: Client = create_client(SUPABASE_URL, SUPABASE_ANON_KEY)

# –ö—ç—à –º–µ–Ω—é (–¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ë–î)
menu_cache = {
    'products': None,
    'last_updated': None
}

# –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–µ–π
def role_required(allowed_roles: List[str]):
    def decorator(func):
        @wraps(func)
        async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
            user_id = update.effective_user.id
            try:
                user_profile = supabase.table('profiles').select('*').eq('user_id', user_id).execute()
                if not user_profile.data or user_profile.data[0]['role'] not in allowed_roles:
                    if update.callback_query:
                        await update.callback_query.answer('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.')
                    else:
                        await update.message.reply_text('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.')
                    return
                return await func(update, context, *args, **kwargs)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏: {e}")
                if update.callback_query:
                    await update.callback_query.answer('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.')
                else:
                    await update.message.reply_text('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.')
        return wrapper
    return decorator

# –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–Ω—é —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
def get_products():
    global menu_cache
    # –ö—ç—à–∏—Ä—É–µ–º –Ω–∞ 5 –º–∏–Ω—É—Ç
    if menu_cache['products'] and menu_cache['last_updated'] and (os.times().elapsed - menu_cache['last_updated'] < 300):
        return menu_cache['products']
    
    try:
        products = supabase.table('products').select('*').eq('is_available', True).execute()
        menu_cache['products'] = products.data
        menu_cache['last_updated'] = os.times().elapsed
        return products.data
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {e}")
        return []

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    username = user.username
    full_name = user.full_name
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        profile = supabase.table('profiles').select('*').eq('user_id', user_id).execute()
        
        if not profile.data:
            supabase.table('profiles').insert({
                'user_id': user_id,
                'username': username,
                'full_name': full_name,
                'role': 'customer'
            }).execute()
        else:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
            supabase.table('profiles').update({
                'username': username,
                'full_name': full_name
            }).eq('user_id', user_id).execute()
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        profile = supabase.table('profiles').select('*').eq('user_id', user_id).execute().data[0]
        role = profile['role']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã
        if role == 'customer':
            active_orders = supabase.table('orders').select('*').eq('customer_id', user_id).in_('status', ['pending', 'preparing', 'ready_for_pickup']).execute()
            if active_orders.data:
                order = active_orders.data[0]
                status_text = {
                    'pending': '–æ–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏',
                    'preparing': '–≥–æ—Ç–æ–≤–∏—Ç—Å—è',
                    'ready_for_pickup': '–≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ'
                }.get(order['status'], order['status'])
                
                await update.message.reply_text(
                    f"–£ –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑ ‚Ññ{order['id']}.\n"
                    f"–°—Ç–∞—Ç—É—Å: {status_text}\n"
                    f"–ü—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏: {'–õ–µ–≤—ã–π –±—É—Ñ–µ—Ç' if order['pickup_location'] == 'left_buffer' else '–ü—Ä–∞–≤—ã–π –±—É—Ñ–µ—Ç'}\n"
                    f"–°—É–º–º–∞: {order['total_amount']}‚ÇΩ\n\n"
                    "–î–æ–∂–¥–∏—Ç–µ—Å—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞."
                )
                return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ –º–µ–Ω—é
        if role == 'customer':
            await show_customer_menu(update)
        elif role in ['seller_left', 'seller_right']:
            await show_seller_menu(update, role)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /start: {e}")
        await update.message.reply_text('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.')

async def show_customer_menu(update: Update):
    keyboard = [
        [InlineKeyboardButton("üçø –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="make_order")],
        [InlineKeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞", callback_data="view_cart")],
        [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_orders")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.message:
        await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)
    else:
        await update.callback_query.edit_message_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=reply_markup)

async def show_seller_menu(update: Update, role: str):
    buffer = "–ª–µ–≤–æ–≥–æ" if role == "seller_left" else "–ø—Ä–∞–≤–æ–≥–æ"
    keyboard = [
        [InlineKeyboardButton("üì• –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã", callback_data="new_orders")],
        [InlineKeyboardButton("üë®‚Äçüç≥ –í —Ä–∞–±–æ—Ç–µ", callback_data="preparing_orders")],
        [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤—ã–µ", callback_data="ready_orders")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.message:
        await update.message.reply_text(f"–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è {buffer} –±—É—Ñ–µ—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=reply_markup)
    else:
        await update.callback_query.edit_message_text(f"–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è {buffer} –±—É—Ñ–µ—Ç–∞. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=reply_markup)

# –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data
    
    user_id = update.effective_user.id
    
    try:
        profile = supabase.table('profiles').select('*').eq('user_id', user_id).execute()
        if not profile.data:
            await query.edit_message_text("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è.")
            return
            
        role = profile.data[0]['role']
        
        if data == "make_order":
            await show_categories(update)
        elif data == "view_cart":
            await show_cart(update, user_id)
        elif data == "my_orders":
            await show_my_orders(update, user_id)
        elif data == "back_to_main":
            if role == 'customer':
                await show_customer_menu(update)
            else:
                await show_seller_menu(update, role)
        elif data.startswith("category_"):
            category = data.split("_")[1]
            await show_products(update, category)
        elif data.startswith("add_to_cart_"):
            product_id = int(data.split("_")[3])
            await add_to_cart(update, user_id, product_id)
        elif data.startswith("remove_from_cart_"):
            item_id = int(data.split("_")[3])
            await remove_from_cart(update, user_id, item_id)
        elif data == "checkout":
            await request_pickup_location(update)
        elif data.startswith("confirm_order_"):
            location = data.split("_")[2]
            await confirm_order(update, user_id, location)
        elif data == "new_orders":
            await show_new_orders(update, role)
        elif data.startswith("take_order_"):
            order_id = int(data.split("_")[2])
            await take_order(update, order_id, user_id)
        elif data.startswith("order_ready_"):
            order_id = int(data.split("_")[2])
            await mark_order_ready(update, order_id)
        elif data.startswith("order_completed_"):
            order_id = int(data.split("_")[2])
            await mark_order_completed(update, order_id)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")

# –ü–æ–∫–∞–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤
async def show_categories(update: Update):
    products = get_products()
    categories = set([product['category'] for product in products])
    
    keyboard = []
    for category in categories:
        if category == "popcorn":
            text = "üçø –ü–æ–ø–∫–æ—Ä–Ω"
        elif category == "drinks":
            text = "ü•§ –ù–∞–ø–∏—Ç–∫–∏"
        elif category == "cotton_candy":
            text = "üç≠ –°–ª–∞–¥–∫–∞—è –≤–∞—Ç–∞"
        else:
            text = category
        keyboard.append([InlineKeyboardButton(text, callback_data=f"category_{category}")])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)

# –ü–æ–∫–∞–∑ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
async def show_products(update: Update, category: str):
    products = get_products()
    category_products = [p for p in products if p['category'] == category]
    
    keyboard = []
    for product in category_products:
        button_text = f"{product['name']} - {product['price']}‚ÇΩ"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f"add_to_cart_{product['id']}")])
    
    keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="make_order")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    category_name = "–ø–æ–ø–∫–æ—Ä–Ω–∞" if category == "popcorn" else "–Ω–∞–ø–∏—Ç–∫–æ–≤" if category == "drinks" else "—Å–ª–∞–¥–∫–æ–π –≤–∞—Ç—ã"
    await update.callback_query.edit_message_text(f"–í—ã–±–µ—Ä–∏—Ç–µ {category_name}:", reply_markup=reply_markup)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –∫–æ—Ä–∑–∏–Ω—É
async def add_to_cart(update: Update, user_id: int, product_id: int):
    try:
        # –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        cart = supabase.table('orders').select('*').eq('customer_id', user_id).eq('status', 'cart').execute()
        
        if not cart.data:
            cart = supabase.table('orders').insert({
                'customer_id': user_id,
                'status': 'cart',
                'total_amount': 0
            }).execute()
            order_id = cart.data[0]['id']
        else:
            order_id = cart.data[0]['id']
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
        product = supabase.table('products').select('*').eq('id', product_id).execute().data[0]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ
        existing_item = supabase.table('order_items').select('*').eq('order_id', order_id).eq('product_id', product_id).execute()
        
        if existing_item.data:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            new_quantity = existing_item.data[0]['quantity'] + 1
            supabase.table('order_items').update({
                'quantity': new_quantity
            }).eq('id', existing_item.data[0]['id']).execute()
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä
            supabase.table('order_items').insert({
                'order_id': order_id,
                'product_id': product_id,
                'quantity': 1,
                'price_at_time': product['price']
            }).execute()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É
        total = calculate_order_total(order_id)
        supabase.table('orders').update({
            'total_amount': total
        }).eq('id', order_id).execute()
        
        await update.callback_query.answer(f"{product['name']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")
        await show_categories(update)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É: {e}")
        await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É")

# –ü–æ–∫–∞–∑ –∫–æ—Ä–∑–∏–Ω—ã
async def show_cart(update: Update, user_id: int):
    try:
        cart = supabase.table('orders').select('*').eq('customer_id', user_id).eq('status', 'cart').execute()
        
        if not cart.data:
            await update.callback_query.edit_message_text("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
            return
        
        order_id = cart.data[0]['id']
        items = supabase.table('order_items').select('*, products(name)').eq('order_id', order_id).execute()
        
        if not items.data:
            await update.callback_query.edit_message_text("üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
            return
        
        message = "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞:\n\n"
        total = 0
        
        keyboard = []
        for item in items.data:
            product_name = item['products']['name']
            quantity = item['quantity']
            price = item['price_at_time']
            item_total = quantity * price
            total += item_total
            message += f"{product_name} x{quantity} - {item_total}‚ÇΩ\n"
            keyboard.append([
                InlineKeyboardButton(f"‚ùå –£–¥–∞–ª–∏—Ç—å {product_name}", callback_data=f"remove_from_cart_{item['id']}")
            ])
        
        message += f"\nüíµ –ò—Ç–æ–≥–æ: {total}‚ÇΩ"
        
        keyboard.append([InlineKeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")])
        keyboard.append([InlineKeyboardButton("üì¶ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏", callback_data="make_order")])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(message, reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
        await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ—Ä–∑–∏–Ω—ã")

# –£–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
async def remove_from_cart(update: Update, user_id: int, item_id: int):
    try:
        # –£–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã
        supabase.table('order_items').delete().eq('id', item_id).execute()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É –∫–æ—Ä–∑–∏–Ω—ã
        cart = supabase.table('orders').select('*').eq('customer_id', user_id).eq('status', 'cart').execute()
        if cart.data:
            order_id = cart.data[0]['id']
            total = calculate_order_total(order_id)
            supabase.table('orders').update({
                'total_amount': total
            }).eq('id', order_id).execute()
        
        await update.callback_query.answer("–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")
        await show_cart(update, user_id)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
        await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")

# –ó–∞–ø—Ä–æ—Å –º–µ—Å—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
async def request_pickup_location(update: Update):
    keyboard = [
        [InlineKeyboardButton("–õ–µ–≤—ã–π –±—É—Ñ–µ—Ç", callback_data="confirm_order_left")],
        [InlineKeyboardButton("–ü—Ä–∞–≤—ã–π –±—É—Ñ–µ—Ç", callback_data="confirm_order_right")],
        [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="view_cart")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.callback_query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –±—É—Ñ–µ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:", reply_markup=reply_markup)

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
async def confirm_order(update: Update, user_id: int, location: str):
    try:
        # –ù–∞—Ö–æ–¥–∏–º –∫–æ—Ä–∑–∏–Ω—É
        cart = supabase.table('orders').select('*').eq('customer_id', user_id).eq('status', 'cart').execute()
        
        if not cart.data:
            await update.callback_query.edit_message_text("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
            return
        
        order_id = cart.data[0]['id']
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑
        supabase.table('orders').update({
            'status': 'pending',
            'pickup_location': f"{location}_buffer",
            'updated_at': 'now()'
        }).eq('id', order_id).execute()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–æ–¥–∞–≤—Ü–æ–≤
        await notify_sellers(order_id, location)
        
        await update.callback_query.edit_message_text(
            "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ú–æ–∏ –∑–∞–∫–∞–∑—ã¬ª."
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
        await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")

# –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –æ –Ω–æ–≤–æ–º –∑–∞–∫–∞–∑–µ
async def notify_sellers(order_id: int, location: str):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
        order = supabase.table('orders').select('*, order_items(*, products(name))').eq('id', order_id).execute().data[0]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞
        message = f"üì• –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ{order_id} –¥–ª—è {'–ª–µ–≤–æ–≥–æ' if location == 'left' else '–ø—Ä–∞–≤–æ–≥–æ'} –±—É—Ñ–µ—Ç–∞.\n"
        message += f"üíµ –°—É–º–º–∞: {order['total_amount']}‚ÇΩ\n\n"
        message += "–°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n"
        
        for item in order['order_items']:
            message += f"‚Ä¢ {item['products']['name']} x{item['quantity']}\n"
        
        # –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –¥–ª—è —ç—Ç–æ–≥–æ –±—É—Ñ–µ—Ç–∞
        seller_role = f"seller_{location}"
        sellers = supabase.table('profiles').select('*').eq('role', seller_role).execute()
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø—Ä–æ–¥–∞–≤—Ü—É
        for seller in sellers.data:
            try:
                keyboard = [[InlineKeyboardButton("üë®‚Äçüç≥ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É", callback_data=f"take_order_{order_id}")]]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await application.bot.send_message(
                    chat_id=seller['user_id'],
                    text=message,
                    reply_markup=reply_markup
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü—É {seller['user_id']}: {e}")
                
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü–æ–≤: {e}")

# –ü–æ–∫–∞–∑ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞
@role_required(['seller_left', 'seller_right'])
async def show_new_orders(update: Update, role: str):
    try:
        buffer_location = "left_buffer" if role == "seller_left" else "right_buffer"
        orders = supabase.table('orders').select('*, profiles(full_name)').eq('status', 'pending').eq('pickup_location', buffer_location).execute()
        
        if not orders.data:
            await update.callback_query.edit_message_text("–ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç.")
            return
        
        keyboard = []
        for order in orders.data:
            button_text = f"–ó–∞–∫–∞–∑ ‚Ññ{order['id']} –æ—Ç {order['profiles']['full_name']} - {order['total_amount']}‚ÇΩ"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f"take_order_{order['id']}")])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text("–ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã:", reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {e}")
        await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤")

# –í–∑—è—Ç–∏–µ –∑–∞–∫–∞–∑–∞ –≤ —Ä–∞–±–æ—Ç—É –ø—Ä–æ–¥–∞–≤—Ü–æ–º
@role_required(['seller_left', 'seller_right'])
async def take_order(update: Update, order_id: int, seller_id: int):
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–∏
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–∫–∞–∑ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
        order = supabase.table('orders').select('*').eq('id', order_id).execute()
        
        if not order.data:
            await update.callback_query.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
            
        order = order.data[0]
        
        if order['status'] != 'pending':
            await update.callback_query.answer("–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –≤–∑—è—Ç –¥—Ä—É–≥–∏–º –ø—Ä–æ–¥–∞–≤—Ü–æ–º!")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        supabase.table('orders').update({
            'status': 'preparing',
            'updated_at': 'now()'
        }).eq('id', order_id).execute()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        try:
            await application.bot.send_message(
                chat_id=order['customer_id'],
                text=f"–í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order_id} –≤–∑—è—Ç –≤ —Ä–∞–±–æ—Ç—É!"
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è {order['customer_id']}: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –ø—Ä–æ–¥–∞–≤—Ü–∞
        await update.callback_query.edit_message_text(
            text=f"‚úÖ –í—ã –≤–∑—è–ª–∏ –≤ —Ä–∞–±–æ—Ç—É –∑–∞–∫–∞–∑ ‚Ññ{order_id}.\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–º.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤", callback_data=f"order_ready_{order_id}")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="new_orders")]
            ])
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤–∑—è—Ç–∏—è –∑–∞–∫–∞–∑–∞: {e}")
        await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –û—Ç–º–µ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ –∫–∞–∫ –≥–æ—Ç–æ–≤–æ–≥–æ
@role_required(['seller_left', 'seller_right'])
async def mark_order_ready(update: Update, order_id: int):
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        supabase.table('orders').update({
            'status': 'ready_for_pickup',
            'updated_at': 'now()'
        }).eq('id', order_id).execute()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
        order = supabase.table('orders').select('*').eq('id', order_id).execute().data[0]
        
        try:
            await application.bot.send_message(
                chat_id=order['customer_id'],
                text=f"‚úÖ –í–∞—à –∑–∞–∫–∞–∑ ‚Ññ{order_id} –≥–æ—Ç–æ–≤! –ó–∞–±–∏—Ä–∞–π—Ç–µ —É {'–õ–µ–≤–æ–≥–æ' if order['pickup_location'] == 'left_buffer' else '–ü—Ä–∞–≤–æ–≥–æ'} –±—É—Ñ–µ—Ç–∞."
            )
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—è {order['customer_id']}: {e}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –ø—Ä–æ–¥–∞–≤—Ü–∞
        await update.callback_query.edit_message_text(
            text=f"‚úÖ –ó–∞–∫–∞–∑ ‚Ññ{order_id} –≥–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üì¶ –ó–∞–∫–∞–∑ –≤—ã–¥–∞–Ω", callback_data=f"order_completed_{order_id}")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="preparing_orders")]
            ])
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞: {e}")
        await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –û—Ç–º–µ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ
@role_required(['seller_left', 'seller_right'])
async def mark_order_completed(update: Update, order_id: int):
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
        supabase.table('orders').update({
            'status': 'completed',
            'updated_at': 'now()'
        }).eq('id', order_id).execute()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –ø—Ä–æ–¥–∞–≤—Ü–∞
        await update.callback_query.edit_message_text(
            text=f"‚úÖ –ó–∞–∫–∞–∑ ‚Ññ{order_id} –∑–∞–≤–µ—Ä—à–µ–Ω.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="ready_orders")]
            ])
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
        await update.callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

# –ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def show_my_orders(update: Update, user_id: int):
    try:
        orders = supabase.table('orders').select('*').eq('customer_id', user_id).order('created_at', desc=True).execute()
        
        if not orders.data:
            await update.callback_query.edit_message_text("–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.")
            return
        
        message = "üìã –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤:\n\n"
        
        for order in orders.data:
            status_text = {
                'cart': '–ö–æ—Ä–∑–∏–Ω–∞',
                'pending': '–û–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏',
                'preparing': '–ì–æ—Ç–æ–≤–∏—Ç—Å—è',
                'ready_for_pickup': '–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ',
                'completed': '–ó–∞–≤–µ—Ä—à–µ–Ω',
                'cancelled': '–û—Ç–º–µ–Ω–µ–Ω'
            }.get(order['status'], order['status'])
            
            message += f"–ó–∞–∫–∞–∑ ‚Ññ{order['id']} - {status_text}\n"
            message += f"–°—É–º–º–∞: {order['total_amount']}‚ÇΩ\n"
            message += f"–î–∞—Ç–∞: {order['created_at'][:10]}\n\n"
        
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_main")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(message, reply_markup=reply_markup)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {e}")
        await update.callback_query.edit_message_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–∫–∞–∑–æ–≤")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–±—â–µ–π —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞
def calculate_order_total(order_id: int) -> float:
    try:
        items = supabase.table('order_items').select('*').eq('order_id', order_id).execute()
        total = 0
        
        for item in items.data:
            total += item['quantity'] * item['price_at_time']
        
        return total
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ —Å—É–º–º—ã –∑–∞–∫–∞–∑–∞: {e}")
        return 0

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è Vercel
async def webhook_handler(event, context):
    if event.get('httpMethod') == 'POST':
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç –≤–µ–±—Ö—É–∫–∞, –µ—Å–ª–∏ –∑–∞–¥–∞–Ω
        if WEBHOOK_SECRET:
            token = event.get('headers', {}).get('X-Telegram-Bot-Api-Secret-Token')
            if token != WEBHOOK_SECRET:
                return {'statusCode': 403, 'body': 'Forbidden'}
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        try:
            update = Update.de_json(json.loads(event['body']), application.bot)
            await application.process_update(update)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {e}")
            return {'statusCode': 500, 'body': 'Error'}
        
        return {'statusCode': 200, 'body': 'OK'}
    
    return {'statusCode': 404, 'body': 'Not Found'}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
application = Application.builder().token(BOT_TOKEN).build()

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
application.add_handler(CommandHandler('start', start))
application.add_handler(CallbackQueryHandler(button_handler))

# Lambda handler –¥–ª—è Vercel
def vercel_handler(event, context):
    return response(webhook_handler, event, context)
